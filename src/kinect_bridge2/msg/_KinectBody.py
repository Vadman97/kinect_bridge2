# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kinect_bridge2/KinectBody.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import kinect_bridge2.msg

class KinectBody(genpy.Message):
  _md5sum = "2119b58982f073d8af39235644f3ad4a"
  _type = "kinect_bridge2/KinectBody"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 HAND_STATE_UNKNOWN = 0
uint8 HAND_STATE_NOT_TRACKED = 1
uint8 HAND_STATE_OPEN = 2
uint8 HAND_STATE_CLOSED = 3
uint8 HAND_STATE_LASSO = 4

kinect_bridge2/KinectJoint[] joints
uint8 is_tracked
uint8 hand_state_left
uint8 hand_state_right

kinect_bridge2/KinectBodyLean lean

================================================================================
MSG: kinect_bridge2/KinectJoint
uint8 JOINT_TYPE_SPINE_BASE = 0
uint8 JOINT_TYPE_SPINE_MID = 1
uint8 JOINT_TYPE_NECK = 2
uint8 JOINT_TYPE_HEAD = 3
uint8 JOINT_TYPE_SHOULDER_LEFT = 4
uint8 JOINT_TYPE_ELBOW_LEFT = 5
uint8 JOINT_TYPE_WRIST_LEFT = 6
uint8 JOINT_TYPE_HAND_LEFT = 7
uint8 JOINT_TYPE_SHOULDER_RIGHT = 8
uint8 JOINT_TYPE_ELBOW_RIGHT = 9
uint8 JOINT_TYPE_WRIST_RIGHT = 10
uint8 JOINT_TYPE_HAND_RIGHT = 11
uint8 JOINT_TYPE_HIP_LEFT = 12
uint8 JOINT_TYPE_KNEE_LEFT = 13
uint8 JOINT_TYPE_ANKLE_LEFT = 14
uint8 JOINT_TYPE_FOOT_LEFT = 15
uint8 JOINT_TYPE_HIP_RIGHT = 16
uint8 JOINT_TYPE_KNEE_RIGHT = 17
uint8 JOINT_TYPE_ANKLE_RIGHT = 18
uint8 JOINT_TYPE_FOOT_RIGHT = 19
uint8 JOINT_TYPE_SPINE_SHOULDER = 20
uint8 JOINT_TYPE_HANDTIP_LEFT = 21
uint8 JOINT_TYPE_THUMB_LEFT = 22
uint8 JOINT_TYPE_HANDTIP_RIGHT = 23
uint8 JOINT_TYPE_THUMB_RIGHT = 24

uint8 TRACKING_STATE_NOT_TRACKED = 0
uint8 TRACKING_STATE_INFERRED = 1
uint8 TRACKING_STATE_TRACKED = 2

geometry_msgs/Point position
geometry_msgs/Quaternion orientation
uint8 joint_type
uint8 tracking_state

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: kinect_bridge2/KinectBodyLean
float32 x
float32 y
"""
  # Pseudo-constants
  HAND_STATE_UNKNOWN = 0
  HAND_STATE_NOT_TRACKED = 1
  HAND_STATE_OPEN = 2
  HAND_STATE_CLOSED = 3
  HAND_STATE_LASSO = 4

  __slots__ = ['joints','is_tracked','hand_state_left','hand_state_right','lean']
  _slot_types = ['kinect_bridge2/KinectJoint[]','uint8','uint8','uint8','kinect_bridge2/KinectBodyLean']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joints,is_tracked,hand_state_left,hand_state_right,lean

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KinectBody, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joints is None:
        self.joints = []
      if self.is_tracked is None:
        self.is_tracked = 0
      if self.hand_state_left is None:
        self.hand_state_left = 0
      if self.hand_state_right is None:
        self.hand_state_right = 0
      if self.lean is None:
        self.lean = kinect_bridge2.msg.KinectBodyLean()
    else:
      self.joints = []
      self.is_tracked = 0
      self.hand_state_left = 0
      self.hand_state_right = 0
      self.lean = kinect_bridge2.msg.KinectBodyLean()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.joints:
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_2B.pack(_x.joint_type, _x.tracking_state))
      _x = self
      buff.write(_struct_3B2f.pack(_x.is_tracked, _x.hand_state_left, _x.hand_state_right, _x.lean.x, _x.lean.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.joints is None:
        self.joints = None
      if self.lean is None:
        self.lean = kinect_bridge2.msg.KinectBodyLean()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joints = []
      for i in range(0, length):
        val1 = kinect_bridge2.msg.KinectJoint()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.joint_type, _x.tracking_state,) = _struct_2B.unpack(str[start:end])
        self.joints.append(val1)
      _x = self
      start = end
      end += 11
      (_x.is_tracked, _x.hand_state_left, _x.hand_state_right, _x.lean.x, _x.lean.y,) = _struct_3B2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.joints:
        _v5 = val1.position
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_2B.pack(_x.joint_type, _x.tracking_state))
      _x = self
      buff.write(_struct_3B2f.pack(_x.is_tracked, _x.hand_state_left, _x.hand_state_right, _x.lean.x, _x.lean.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.joints is None:
        self.joints = None
      if self.lean is None:
        self.lean = kinect_bridge2.msg.KinectBodyLean()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joints = []
      for i in range(0, length):
        val1 = kinect_bridge2.msg.KinectJoint()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.joint_type, _x.tracking_state,) = _struct_2B.unpack(str[start:end])
        self.joints.append(val1)
      _x = self
      start = end
      end += 11
      (_x.is_tracked, _x.hand_state_left, _x.hand_state_right, _x.lean.x, _x.lean.y,) = _struct_3B2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
_struct_3B2f = struct.Struct("<3B2f")
_struct_2B = struct.Struct("<2B")
_struct_3d = struct.Struct("<3d")
