/* Auto-generated by genmsg_cpp for file /home/vadim/Desktop/workspace/kinect_bridge2/msg/KinectJoint.msg */
#ifndef KINECT_BRIDGE2_MESSAGE_KINECTJOINT_H
#define KINECT_BRIDGE2_MESSAGE_KINECTJOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"
#include "geometry_msgs/Quaternion.h"

namespace kinect_bridge2
{
template <class ContainerAllocator>
struct KinectJoint_ {
  typedef KinectJoint_<ContainerAllocator> Type;

  KinectJoint_()
  : position()
  , orientation()
  , joint_type(0)
  , tracking_state(0)
  {
  }

  KinectJoint_(const ContainerAllocator& _alloc)
  : position(_alloc)
  , orientation(_alloc)
  , joint_type(0)
  , tracking_state(0)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  position;

  typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
   ::geometry_msgs::Quaternion_<ContainerAllocator>  orientation;

  typedef uint8_t _joint_type_type;
  uint8_t joint_type;

  typedef uint8_t _tracking_state_type;
  uint8_t tracking_state;

  enum { JOINT_TYPE_SPINE_BASE = 0 };
  enum { JOINT_TYPE_SPINE_MID = 1 };
  enum { JOINT_TYPE_NECK = 2 };
  enum { JOINT_TYPE_HEAD = 3 };
  enum { JOINT_TYPE_SHOULDER_LEFT = 4 };
  enum { JOINT_TYPE_ELBOW_LEFT = 5 };
  enum { JOINT_TYPE_WRIST_LEFT = 6 };
  enum { JOINT_TYPE_HAND_LEFT = 7 };
  enum { JOINT_TYPE_SHOULDER_RIGHT = 8 };
  enum { JOINT_TYPE_ELBOW_RIGHT = 9 };
  enum { JOINT_TYPE_WRIST_RIGHT = 10 };
  enum { JOINT_TYPE_HAND_RIGHT = 11 };
  enum { JOINT_TYPE_HIP_LEFT = 12 };
  enum { JOINT_TYPE_KNEE_LEFT = 13 };
  enum { JOINT_TYPE_ANKLE_LEFT = 14 };
  enum { JOINT_TYPE_FOOT_LEFT = 15 };
  enum { JOINT_TYPE_HIP_RIGHT = 16 };
  enum { JOINT_TYPE_KNEE_RIGHT = 17 };
  enum { JOINT_TYPE_ANKLE_RIGHT = 18 };
  enum { JOINT_TYPE_FOOT_RIGHT = 19 };
  enum { JOINT_TYPE_SPINE_SHOULDER = 20 };
  enum { JOINT_TYPE_HANDTIP_LEFT = 21 };
  enum { JOINT_TYPE_THUMB_LEFT = 22 };
  enum { JOINT_TYPE_HANDTIP_RIGHT = 23 };
  enum { JOINT_TYPE_THUMB_RIGHT = 24 };
  enum { TRACKING_STATE_NOT_TRACKED = 0 };
  enum { TRACKING_STATE_INFERRED = 1 };
  enum { TRACKING_STATE_TRACKED = 2 };

  typedef boost::shared_ptr< ::kinect_bridge2::KinectJoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinect_bridge2::KinectJoint_<ContainerAllocator>  const> ConstPtr;
}; // struct KinectJoint
typedef  ::kinect_bridge2::KinectJoint_<std::allocator<void> > KinectJoint;

typedef boost::shared_ptr< ::kinect_bridge2::KinectJoint> KinectJointPtr;
typedef boost::shared_ptr< ::kinect_bridge2::KinectJoint const> KinectJointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kinect_bridge2::KinectJoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kinect_bridge2::KinectJoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kinect_bridge2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kinect_bridge2::KinectJoint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kinect_bridge2::KinectJoint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kinect_bridge2::KinectJoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "39f95ffe5b790c4fa94ce2b4bf6d9727";
  }

  static const char* value(const  ::kinect_bridge2::KinectJoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x39f95ffe5b790c4fULL;
  static const uint64_t static_value2 = 0xa94ce2b4bf6d9727ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinect_bridge2::KinectJoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinect_bridge2/KinectJoint";
  }

  static const char* value(const  ::kinect_bridge2::KinectJoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kinect_bridge2::KinectJoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 JOINT_TYPE_SPINE_BASE = 0\n\
uint8 JOINT_TYPE_SPINE_MID = 1\n\
uint8 JOINT_TYPE_NECK = 2\n\
uint8 JOINT_TYPE_HEAD = 3\n\
uint8 JOINT_TYPE_SHOULDER_LEFT = 4\n\
uint8 JOINT_TYPE_ELBOW_LEFT = 5\n\
uint8 JOINT_TYPE_WRIST_LEFT = 6\n\
uint8 JOINT_TYPE_HAND_LEFT = 7\n\
uint8 JOINT_TYPE_SHOULDER_RIGHT = 8\n\
uint8 JOINT_TYPE_ELBOW_RIGHT = 9\n\
uint8 JOINT_TYPE_WRIST_RIGHT = 10\n\
uint8 JOINT_TYPE_HAND_RIGHT = 11\n\
uint8 JOINT_TYPE_HIP_LEFT = 12\n\
uint8 JOINT_TYPE_KNEE_LEFT = 13\n\
uint8 JOINT_TYPE_ANKLE_LEFT = 14\n\
uint8 JOINT_TYPE_FOOT_LEFT = 15\n\
uint8 JOINT_TYPE_HIP_RIGHT = 16\n\
uint8 JOINT_TYPE_KNEE_RIGHT = 17\n\
uint8 JOINT_TYPE_ANKLE_RIGHT = 18\n\
uint8 JOINT_TYPE_FOOT_RIGHT = 19\n\
uint8 JOINT_TYPE_SPINE_SHOULDER = 20\n\
uint8 JOINT_TYPE_HANDTIP_LEFT = 21\n\
uint8 JOINT_TYPE_THUMB_LEFT = 22\n\
uint8 JOINT_TYPE_HANDTIP_RIGHT = 23\n\
uint8 JOINT_TYPE_THUMB_RIGHT = 24\n\
\n\
uint8 TRACKING_STATE_NOT_TRACKED = 0\n\
uint8 TRACKING_STATE_INFERRED = 1\n\
uint8 TRACKING_STATE_TRACKED = 2\n\
\n\
geometry_msgs/Point position\n\
geometry_msgs/Quaternion orientation\n\
uint8 joint_type\n\
uint8 tracking_state\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::kinect_bridge2::KinectJoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::kinect_bridge2::KinectJoint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kinect_bridge2::KinectJoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.orientation);
    stream.next(m.joint_type);
    stream.next(m.tracking_state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct KinectJoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinect_bridge2::KinectJoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kinect_bridge2::KinectJoint_<ContainerAllocator> & v) 
  {
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "joint_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_type);
    s << indent << "tracking_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tracking_state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // KINECT_BRIDGE2_MESSAGE_KINECTJOINT_H

