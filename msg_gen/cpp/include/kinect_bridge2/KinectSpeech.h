/* Auto-generated by genmsg_cpp for file /home/vadim/Desktop/workspace/kinect_bridge2/msg/KinectSpeech.msg */
#ifndef KINECT_BRIDGE2_MESSAGE_KINECTSPEECH_H
#define KINECT_BRIDGE2_MESSAGE_KINECTSPEECH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "kinect_bridge2/KinectSpeechPhrase.h"

namespace kinect_bridge2
{
template <class ContainerAllocator>
struct KinectSpeech_ {
  typedef KinectSpeech_<ContainerAllocator> Type;

  KinectSpeech_()
  : phrases()
  {
  }

  KinectSpeech_(const ContainerAllocator& _alloc)
  : phrases(_alloc)
  {
  }

  typedef std::vector< ::kinect_bridge2::KinectSpeechPhrase_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kinect_bridge2::KinectSpeechPhrase_<ContainerAllocator> >::other >  _phrases_type;
  std::vector< ::kinect_bridge2::KinectSpeechPhrase_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kinect_bridge2::KinectSpeechPhrase_<ContainerAllocator> >::other >  phrases;


  typedef boost::shared_ptr< ::kinect_bridge2::KinectSpeech_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinect_bridge2::KinectSpeech_<ContainerAllocator>  const> ConstPtr;
}; // struct KinectSpeech
typedef  ::kinect_bridge2::KinectSpeech_<std::allocator<void> > KinectSpeech;

typedef boost::shared_ptr< ::kinect_bridge2::KinectSpeech> KinectSpeechPtr;
typedef boost::shared_ptr< ::kinect_bridge2::KinectSpeech const> KinectSpeechConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kinect_bridge2::KinectSpeech_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kinect_bridge2::KinectSpeech_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kinect_bridge2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kinect_bridge2::KinectSpeech_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kinect_bridge2::KinectSpeech_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kinect_bridge2::KinectSpeech_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bb4474b86bf47d9228f16d2febb29bc8";
  }

  static const char* value(const  ::kinect_bridge2::KinectSpeech_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbb4474b86bf47d92ULL;
  static const uint64_t static_value2 = 0x28f16d2febb29bc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinect_bridge2::KinectSpeech_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinect_bridge2/KinectSpeech";
  }

  static const char* value(const  ::kinect_bridge2::KinectSpeech_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kinect_bridge2::KinectSpeech_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinect_bridge2/KinectSpeechPhrase[] phrases\n\
\n\
================================================================================\n\
MSG: kinect_bridge2/KinectSpeechPhrase\n\
string tag\n\
float32 confidence\n\
\n\
";
  }

  static const char* value(const  ::kinect_bridge2::KinectSpeech_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kinect_bridge2::KinectSpeech_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.phrases);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct KinectSpeech_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinect_bridge2::KinectSpeech_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kinect_bridge2::KinectSpeech_<ContainerAllocator> & v) 
  {
    s << indent << "phrases[]" << std::endl;
    for (size_t i = 0; i < v.phrases.size(); ++i)
    {
      s << indent << "  phrases[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kinect_bridge2::KinectSpeechPhrase_<ContainerAllocator> >::stream(s, indent + "    ", v.phrases[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // KINECT_BRIDGE2_MESSAGE_KINECTSPEECH_H

