/* Auto-generated by genmsg_cpp for file /home/vadim/Desktop/workspace/kinect_bridge2/msg/KinectBody.msg */
#ifndef KINECT_BRIDGE2_MESSAGE_KINECTBODY_H
#define KINECT_BRIDGE2_MESSAGE_KINECTBODY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "kinect_bridge2/KinectJoint.h"
#include "kinect_bridge2/KinectBodyLean.h"

namespace kinect_bridge2
{
template <class ContainerAllocator>
struct KinectBody_ {
  typedef KinectBody_<ContainerAllocator> Type;

  KinectBody_()
  : joints()
  , is_tracked(0)
  , hand_state_left(0)
  , hand_state_right(0)
  , lean()
  {
  }

  KinectBody_(const ContainerAllocator& _alloc)
  : joints(_alloc)
  , is_tracked(0)
  , hand_state_left(0)
  , hand_state_right(0)
  , lean(_alloc)
  {
  }

  typedef std::vector< ::kinect_bridge2::KinectJoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kinect_bridge2::KinectJoint_<ContainerAllocator> >::other >  _joints_type;
  std::vector< ::kinect_bridge2::KinectJoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kinect_bridge2::KinectJoint_<ContainerAllocator> >::other >  joints;

  typedef uint8_t _is_tracked_type;
  uint8_t is_tracked;

  typedef uint8_t _hand_state_left_type;
  uint8_t hand_state_left;

  typedef uint8_t _hand_state_right_type;
  uint8_t hand_state_right;

  typedef  ::kinect_bridge2::KinectBodyLean_<ContainerAllocator>  _lean_type;
   ::kinect_bridge2::KinectBodyLean_<ContainerAllocator>  lean;

  enum { HAND_STATE_UNKNOWN = 0 };
  enum { HAND_STATE_NOT_TRACKED = 1 };
  enum { HAND_STATE_OPEN = 2 };
  enum { HAND_STATE_CLOSED = 3 };
  enum { HAND_STATE_LASSO = 4 };

  typedef boost::shared_ptr< ::kinect_bridge2::KinectBody_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinect_bridge2::KinectBody_<ContainerAllocator>  const> ConstPtr;
}; // struct KinectBody
typedef  ::kinect_bridge2::KinectBody_<std::allocator<void> > KinectBody;

typedef boost::shared_ptr< ::kinect_bridge2::KinectBody> KinectBodyPtr;
typedef boost::shared_ptr< ::kinect_bridge2::KinectBody const> KinectBodyConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kinect_bridge2::KinectBody_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kinect_bridge2::KinectBody_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kinect_bridge2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kinect_bridge2::KinectBody_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kinect_bridge2::KinectBody_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kinect_bridge2::KinectBody_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2119b58982f073d8af39235644f3ad4a";
  }

  static const char* value(const  ::kinect_bridge2::KinectBody_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2119b58982f073d8ULL;
  static const uint64_t static_value2 = 0xaf39235644f3ad4aULL;
};

template<class ContainerAllocator>
struct DataType< ::kinect_bridge2::KinectBody_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinect_bridge2/KinectBody";
  }

  static const char* value(const  ::kinect_bridge2::KinectBody_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kinect_bridge2::KinectBody_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 HAND_STATE_UNKNOWN = 0\n\
uint8 HAND_STATE_NOT_TRACKED = 1\n\
uint8 HAND_STATE_OPEN = 2\n\
uint8 HAND_STATE_CLOSED = 3\n\
uint8 HAND_STATE_LASSO = 4\n\
\n\
kinect_bridge2/KinectJoint[] joints\n\
uint8 is_tracked\n\
uint8 hand_state_left\n\
uint8 hand_state_right\n\
\n\
kinect_bridge2/KinectBodyLean lean\n\
\n\
================================================================================\n\
MSG: kinect_bridge2/KinectJoint\n\
uint8 JOINT_TYPE_SPINE_BASE = 0\n\
uint8 JOINT_TYPE_SPINE_MID = 1\n\
uint8 JOINT_TYPE_NECK = 2\n\
uint8 JOINT_TYPE_HEAD = 3\n\
uint8 JOINT_TYPE_SHOULDER_LEFT = 4\n\
uint8 JOINT_TYPE_ELBOW_LEFT = 5\n\
uint8 JOINT_TYPE_WRIST_LEFT = 6\n\
uint8 JOINT_TYPE_HAND_LEFT = 7\n\
uint8 JOINT_TYPE_SHOULDER_RIGHT = 8\n\
uint8 JOINT_TYPE_ELBOW_RIGHT = 9\n\
uint8 JOINT_TYPE_WRIST_RIGHT = 10\n\
uint8 JOINT_TYPE_HAND_RIGHT = 11\n\
uint8 JOINT_TYPE_HIP_LEFT = 12\n\
uint8 JOINT_TYPE_KNEE_LEFT = 13\n\
uint8 JOINT_TYPE_ANKLE_LEFT = 14\n\
uint8 JOINT_TYPE_FOOT_LEFT = 15\n\
uint8 JOINT_TYPE_HIP_RIGHT = 16\n\
uint8 JOINT_TYPE_KNEE_RIGHT = 17\n\
uint8 JOINT_TYPE_ANKLE_RIGHT = 18\n\
uint8 JOINT_TYPE_FOOT_RIGHT = 19\n\
uint8 JOINT_TYPE_SPINE_SHOULDER = 20\n\
uint8 JOINT_TYPE_HANDTIP_LEFT = 21\n\
uint8 JOINT_TYPE_THUMB_LEFT = 22\n\
uint8 JOINT_TYPE_HANDTIP_RIGHT = 23\n\
uint8 JOINT_TYPE_THUMB_RIGHT = 24\n\
\n\
uint8 TRACKING_STATE_NOT_TRACKED = 0\n\
uint8 TRACKING_STATE_INFERRED = 1\n\
uint8 TRACKING_STATE_TRACKED = 2\n\
\n\
geometry_msgs/Point position\n\
geometry_msgs/Quaternion orientation\n\
uint8 joint_type\n\
uint8 tracking_state\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: kinect_bridge2/KinectBodyLean\n\
float32 x\n\
float32 y\n\
";
  }

  static const char* value(const  ::kinect_bridge2::KinectBody_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kinect_bridge2::KinectBody_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joints);
    stream.next(m.is_tracked);
    stream.next(m.hand_state_left);
    stream.next(m.hand_state_right);
    stream.next(m.lean);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct KinectBody_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinect_bridge2::KinectBody_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kinect_bridge2::KinectBody_<ContainerAllocator> & v) 
  {
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kinect_bridge2::KinectJoint_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
    s << indent << "is_tracked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_tracked);
    s << indent << "hand_state_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_state_left);
    s << indent << "hand_state_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_state_right);
    s << indent << "lean: ";
s << std::endl;
    Printer< ::kinect_bridge2::KinectBodyLean_<ContainerAllocator> >::stream(s, indent + "  ", v.lean);
  }
};


} // namespace message_operations
} // namespace ros

#endif // KINECT_BRIDGE2_MESSAGE_KINECTBODY_H

